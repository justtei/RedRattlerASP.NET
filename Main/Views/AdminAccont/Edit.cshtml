@using UserManagementSystem.Localization;
@using UserManagementSystem.Web.Helpers;
@using UserManagementSystem.Web.Models;
@model EditUserViewModel
@{
    ViewBag.Title = StaticContent.Ttl_EditUser;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts
{
    @Url.Script("jquery/jquery.validate.min.js")
    @Url.Script("jquery/jquery.validate.unobtrusive.min.js")
    @Url.Script("custom/common.js")
    @Url.Script("custom/account.js")
    @Url.Script("custom/requiredCheckBoxList.js")
}
<h2>@StaticContent.Ttl_EditUser</h2>
<p>@StaticContent.WtrMrk_Edit</p>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true, @ErrorMessages.UnsuccessfulEdit, new { @class = "alert alert-block alert-error" })
    <fieldset>
        <legend>@StaticContent.Lgd_Edit</legend>
        @Html.HiddenFor(model => model.Id)
        <div class="control-group">
                <div class="control-label">
                    @Html.LabelFor(model => model.PrimaryEmail)
                    <span class="asterisk">*</span>
                </div>
                <div class="controls">
                    @Html.TextBoxFor(model => model.PrimaryEmail)
                    @Html.ValidationMessageFor(model => model.PrimaryEmail)
                    @Html.ValidationMessage(ModelErrorKey.UnsuccesessfulPrimaryEmail.ToString())
                </div>
            </div>
        <div class="control-group">
            <div class="control-label">
                @Html.LabelFor(model => model.FirstName)
                <span class="asterisk">*</span>
            </div>
            <div class="controls">
                @Html.TextBoxFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
        </div>
        <div class="control-group">
            <div class="control-label">
                @Html.LabelFor(model => model.LastName)
                <span class="asterisk">*</span>
            </div>
            <div class="controls">
                @Html.TextBoxFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
        </div>
        <div class="control-group address-part">
            <div class="control-group address-line">
                @{
                    Html.RenderPartialFor(model => model.FullAddress, "Partials/_Address");
                }
            </div>
        </div>
        <div class="phones control-group">
            @for (int i = 0; i < Model.Phones.Count; i++)
            {
                <div class="phone control-group">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(m => m.Phones[i].SelectedPhoneTypeId)
                        </div>
                        <div class="controls">
                            @Html.DropDownListFor(m => m.Phones[i].SelectedPhoneTypeId, Model.Phones[i].PhoneTypes)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(m => m.Phones[i].Number)
                        </div>
                        <div class="controls">
                            @Html.HiddenFor(m => m.Phones[i].Id)
                            @Html.HiddenFor(m => m.Phones[i].CreateUserId)
                            @Html.TextBoxFor(m => m.Phones[i].Number)
                            @Html.ValidationMessageFor(m => m.Phones[i].Number)
                        </div>
                    </div>
                    <div class="control-group">
                        @if (Model.Phones.Count > 1)
                        {
                            <span class="link delete-phone btn btn-mini btn-warning">@StaticContent.Btn_Delete</span>
                        }
                        else
                        {
                            <span class="link delete-phone btn btn-mini btn-warning display-none">@StaticContent.Btn_Delete</span>
                        }
                    </div>
                </div>
            }
            <span class="link add-phone btn btn-small btn-info">@StaticContent.Txt_AddPhoneNumber</span>
        </div>
        <div class="emails control-group">
            @for (int i = 0; i < Model.Emails.Count; i++)
            {
                <div class="email control-group">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(m => m.Emails[i].SelectedEmailTypeId)
                        </div>
                        <div class="controls">
                            @Html.DropDownListFor(m => m.Emails[i].SelectedEmailTypeId, Model.Emails[i].EmailTypes)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(m => m.Emails[i].Value)
                        </div>
                        <div class="controls">
                            @Html.HiddenFor(m => m.Emails[i].Id)
                            @Html.HiddenFor(m => m.Emails[i].CreateUserId)
                            @Html.TextBoxFor(m => m.Emails[i].Value)
                            @Html.ValidationMessageFor(m => m.Emails[i].Value)
                        </div>
                    </div>
                    <div class="control-group">
                        @if (Model.Emails.Count > 1)
                        {
                            <span class="link delete-email btn btn-mini btn-warning">@StaticContent.Btn_Delete</span>
                        }
                        else
                        {
                            <span class="link delete-email btn btn-mini btn-warning display-none">@StaticContent.Btn_Delete</span>
                        }
                    </div>
                </div>
            }
            <span class="link add-email btn btn-small btn-info">@StaticContent.Txt_AddEmail</span>
        </div>
        <div class="publication-part control-group">
            <div id="brands-area">
                <div class="control-label">
                    @Html.Label(StaticContent.Lbl_Brands)
                    <span class="asterisk">*</span>
                </div>
                <div class="controls brand-editor checkbox-list">
                    @for (int i = 0; i < Model.Publications.Count; i++)
                    {
                        <div class="controls">
                            <label class="checkbox">
                                @Html.CheckBoxFor(model => model.Publications[i].BrandSelected, new ViewDataDictionary {
                                    new KeyValuePair<string, object>("data-url", Url.Action("GetPublications", "Publication")),
                                    new KeyValuePair<string, object>("brand-index", i) })
                                @Html.Label(Model.Publications[i].Brand.Description)
                                @Html.HiddenFor(model => model.Publications[i].Brand.Description)
                                @Html.HiddenFor(model => model.Publications[i].Brand.Id)
                            </label>
                        </div>
                    }
                    @* it's essential to place this hidden field after rendering user brands (it affects mark-up)*@
                    <input name="userBrandsValidation" type="hidden" data-val="true" data-val-requiredcheckboxlist="@ErrorMessages.NoBrandsSelected" />
                </div>
                <div class="checkbox-list-error-message">
                    @Html.ValidationMessageFor(m => m.Publications)
                </div>
            </div>
            <div id="publications-area">
                <div class="control-label">
                    @Html.Label(StaticContent.Lbl_Publication)
                    <span class="asterisk">*</span>
                </div>
                <div class="controls publication-editor checkbox-list">
                    @for (int i = 0; i < Model.Publications.Count; i++)
                    {
                        if (Model.Publications[i].BrandSelected)
                        {
                            <div brand-type="@Model.Publications[i].Brand.Description">
                                @for (int j = 0; j < Model.Publications[i].Publications.Count; j++)
                                {
                                    <div class="controls">
                                        <label class="checkbox">
                                            @Html.CheckBoxFor(model => model.Publications[i].Publications[j].Selected)
                                            @Html.Label(Model.Publications[i].Publications[j].Text)
                                            @Html.HiddenFor(model => model.Publications[i].Publications[j].Value)
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                    }
                    @* it's essential to place this hidden field after rendering user publications (it affects mark-up)*@
                    <input name="userPublicationsValidation" type="hidden" data-val="true" data-val-requiredcheckboxlist="@ErrorMessages.NoPublicationSelected" />
                </div>
                <div class="checkbox-list-error-message">
                    @Html.ValidationMessageFor(m => m.Publications)
                </div>
            </div>
        </div>
        <div class="control-group">
            <div class="control-label">
                @Html.LabelFor(model => model.SelectedRole)
                <span class="asterisk">*</span>
            </div>
            <div class="controls publication-editor">
                @Html.DropDownListFor(model => model.SelectedRole, Model.Roles, StaticContent.WtrMrk_SelectRole)
                @Html.ValidationMessageFor(model => model.SelectedRole)
            </div>
        </div>
        <div class="control-group">
            <div class="control-label">
                @StaticContent.Lbl_CommunicationSettings
            </div>
            <div class="controls">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.HasLeads)
                    @Html.LabelFor(model => model.HasLeads)
                </label>
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.HasNotifications)
                    @Html.LabelFor(model => model.HasNotifications)
                </label>
            </div>
        </div>
        <div class="control-group">
            <div class="control-label">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="controls">
                <label class="radio">
                    @Html.RadioButtonFor(model => model.IsActive, true)
                    @StaticContent.RdBtn_Active
                    <br />
                    @Html.RadioButtonFor(model => model.IsActive, false)
                    @StaticContent.RdBtn_BlockLogin
                </label>
            </div>
        </div>
        <div class="form-actions">
            <input type="submit" value="@StaticContent.Btn_Save" class="btn btn-primary" />
        </div>
    </fieldset>
}
